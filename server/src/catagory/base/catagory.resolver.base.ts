/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCatagoryArgs } from "./CreateCatagoryArgs";
import { UpdateCatagoryArgs } from "./UpdateCatagoryArgs";
import { DeleteCatagoryArgs } from "./DeleteCatagoryArgs";
import { CatagoryCountArgs } from "./CatagoryCountArgs";
import { CatagoryFindManyArgs } from "./CatagoryFindManyArgs";
import { CatagoryFindUniqueArgs } from "./CatagoryFindUniqueArgs";
import { Catagory } from "./Catagory";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { CatagoryService } from "../catagory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Catagory)
export class CatagoryResolverBase {
  constructor(
    protected readonly service: CatagoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Catagory",
    action: "read",
    possession: "any",
  })
  async _catagoriesMeta(
    @graphql.Args() args: CatagoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Catagory])
  @nestAccessControl.UseRoles({
    resource: "Catagory",
    action: "read",
    possession: "any",
  })
  async catagories(
    @graphql.Args() args: CatagoryFindManyArgs
  ): Promise<Catagory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Catagory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Catagory",
    action: "read",
    possession: "own",
  })
  async catagory(
    @graphql.Args() args: CatagoryFindUniqueArgs
  ): Promise<Catagory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Catagory)
  @nestAccessControl.UseRoles({
    resource: "Catagory",
    action: "create",
    possession: "any",
  })
  async createCatagory(
    @graphql.Args() args: CreateCatagoryArgs
  ): Promise<Catagory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Catagory)
  @nestAccessControl.UseRoles({
    resource: "Catagory",
    action: "update",
    possession: "any",
  })
  async updateCatagory(
    @graphql.Args() args: UpdateCatagoryArgs
  ): Promise<Catagory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Catagory)
  @nestAccessControl.UseRoles({
    resource: "Catagory",
    action: "delete",
    possession: "any",
  })
  async deleteCatagory(
    @graphql.Args() args: DeleteCatagoryArgs
  ): Promise<Catagory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async resolveFieldProducts(
    @graphql.Parent() parent: Catagory,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
